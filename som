import numpy as np
from minisom import MiniSom
import matplotlib.pyplot as plt

np.random.seed(42)
data_cluster1 = np.random.normal(0, 0.5, (100, 2))  # Кластер 1
data_cluster2 = np.random.normal(3, 0.5, (100, 2))  # Кластер 2
data_cluster3 = np.random.normal(6, 0.5, (100, 2))  # Кластер 3
data = np.vstack([data_cluster1, data_cluster2, data_cluster3])

data = (data - np.min(data, axis=0)) / (np.max(data, axis=0) - np.min(data, axis=0))

som_width = 10
som_height = 10
input_len = data.shape[1]
som = MiniSom(som_width, som_height, input_len, sigma=1.5, learning_rate=0.5)

som.random_weights_init(data)
som.train_random(data, 1000)

plt.figure(figsize=(10, 10))

for i, x in enumerate(data):
    winner = som.winner(x)
    plt.plot(winner[0] + 0.5, winner[1] + 0.5, 'o', color='blue', alpha=0.5)


weights = som.get_weights()
for i in range(som_width):
    for j in range(som_height):
        plt.scatter(i + 0.5, j + 0.5, color='red', s=50)

plt.xticks([])
plt.yticks([])
plt.title('Self organizing map')
plt.show()
